(ns grape.resource-descriptor-test
  (:require [clojure.test :refer :all]
            [grape.resource-descriptor :as descriptor] 
            [grape.exception :as ex]))

(deftest type-tree-test
  (testing "test type tree"
    (ex/catch 
      (fn [msg module]
        (is (= msg "add duplicate type :acl"))
        (is (= module :resource-tree)))
      (-> (descriptor/mk-resource-descriptor)
          (descriptor/declare-type-hierarchy [:view :zone :rrset :acl] [:user] [:acl])))

    (ex/catch 
      (fn [msg module]
        (is (= msg "acl id field isn't subset of fields"))
        (is (= module :resource-descriptor)))
      (-> (descriptor/mk-resource-descriptor)
          (descriptor/declare-type-hierarchy [:view :zone :rrset] [:user] [:acl])
          (descriptor/declare-resource :acl {:fields {:name :string :ips :string-array} :id-fields [:id]})))

    (ex/catch 
      (fn [msg module]
        (is (= msg "a specify id field which should be generated by grape"))
        (is (= module :resource-descriptor)))
      (-> (descriptor/mk-resource-descriptor)
          (descriptor/declare-type-hierarchy [:a])
          (descriptor/declare-resource :a {:fields {:id :string :name :string :ips :xxxx} :id-fields [:name]})))

    (ex/catch 
      (fn [msg module]
        (is (= msg "acl field type isn't supported"))
        (is (= module :resource-descriptor)))
      (-> (descriptor/mk-resource-descriptor)
          (descriptor/declare-type-hierarchy [:view :zone :rrset] [:user] [:acl])
          (descriptor/declare-resource :acl {:fields {:name :string :ips :xxxx} :id-fields [:name]})))

    (ex/catch 
      (fn [msg module]
        (is (= msg "acl owned-by has-many has intersection"))
        (is (= module :resource-descriptor)))
      (-> (descriptor/mk-resource-descriptor)
          (descriptor/declare-type-hierarchy [:view :zone :rrset] [:user] [:acl])
          (descriptor/declare-resource :view {:fields {:name :string-ci} :id-fields [:name]})
          (descriptor/declare-resource :acl {:fields {:name :string :ips :string-array} 
                                             :id-fields [:name] 
                                             :has-many [:view] 
                                             :owned-by [:view]
                                             })))

    (ex/catch 
      (fn [msg module]
        (is (= msg "a fields, owned-by and has-many name conflict"))
        (is (= module :resource-descriptor)))
      (-> (descriptor/mk-resource-descriptor)
          (descriptor/declare-type-hierarchy [:a :b :c] [:d] [:e])
          (descriptor/declare-resource :a {:fields {:name :string-ci} :id-fields [:name]})
          (descriptor/declare-resource :b {:fields {:name :string :as :string-array} 
                                             :has-many [:a]})))

    (ex/catch 
      (fn [msg module]
        (is (= msg "unknown type :acl"))
        (is (= module :resource-tree)))
      (-> (descriptor/mk-resource-descriptor)
          (descriptor/declare-resource :acl {:fields {:name :string} :id-fields [:name]})))))

(def resource-descriptor
  (-> (descriptor/mk-resource-descriptor)
      (descriptor/declare-type-hierarchy [:view :zone :rrset] [:user] [:acl] [:rrweight])
      (descriptor/declare-resource :acl {:fields {:name :string :ips :string-array} :id-fields [:name]})
      (descriptor/declare-resource :user {:fields {:name :string} :id-fields [:name]})
      (descriptor/declare-resource :view {:fields {:name :string-ci} :id-fields [:name] :has-many [:acl]})
      (descriptor/declare-resource :zone {:fields {:name :domain} :id-fields [:name] :owned-by [:user]})
      (descriptor/declare-resource :rrset {:fields {:name :domain
                                                    :type :string-ci 
                                                    :ttl :integer 
                                                    :rdatas :string-array} 
                                           :owned-by [:view]
                                           :id-fields [:name :type :view]})
      (descriptor/declare-resource :rrweight {:fields {:weights :integer-array} :id-fields [:rrset] :owned-by [:rrset]})))

(deftest type-descriptor-test
  (testing "test type tree, usage, fields"
    (binding [descriptor/*descriptor* resource-descriptor]
      (is (= [:name] (descriptor/id-fields :view)))
      (is (= [:name] (descriptor/id-fields :zone)))
      (is (= [:name :type :view] (descriptor/id-fields :rrset)))
      (is (= [:rrset] (descriptor/id-fields :rrweight)))
      (is (= {:rrset :string :weights :integer-array :id :string} (descriptor/field-and-types :rrweight)))
      (is (= {:zone :domain :view :string-ci :id :string :name :domain :type :string-ci :ttl :integer :rdatas :string-array} 
             (descriptor/field-and-types :rrset))))))

(deftest table-create-sql-test
  (testing "create table for type"
    (binding [descriptor/*descriptor* resource-descriptor]
      (let [[tn cols {:keys [unique-keys primary-keys references]}] (descriptor/create-table-params-for-type :rrset)]
        (is (= :zdns_rrset tn))
        (is (= {:id :string :name :domain :type :string-ci :ttl :integer :rdatas :string-array :zone :domain :view :string-ci} cols))
        (is (= [:name :type :view] unique-keys))
        (is (= [:id] primary-keys))
        (is (= {:zone [:zdns_zone :owned-by :id] :view [:zdns_view :owned-by :id]} references))))))
